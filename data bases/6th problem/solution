-- Step 1: Creating Tables and Constraints

-- Table for Users
CREATE TABLE sgvas_users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    contact_number VARCHAR2(20),
    email VARCHAR2(100) UNIQUE NOT NULL,
    registration_date DATE NOT NULL
);

-- Table for Products
CREATE TABLE sgvas_products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100) NOT NULL,
	price NUMBER(10, 2) NOT NULL,
    category VARCHAR2(50),
    stock_quantity NUMBER DEFAULT 0 CHECK (stock_quantity >= 0)
);

-- Table for Orders
CREATE TABLE sgvas_orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    order_date DATE NOT NULL,
    total_amount NUMBER(10, 2) NOT NULL,
    is_successful CHAR(1) CHECK (is_successful IN ('Y', 'N')) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES sgvas_users(user_id)
);

-- Table for Order Items
CREATE TABLE sgvas_order_items (
    order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    quantity NUMBER NOT NULL CHECK (quantity > 0),
    FOREIGN KEY (order_id) REFERENCES sgvas_orders(order_id),
    FOREIGN KEY (product_id) REFERENCES sgvas_products(product_id)
);

-- Table for Returns
CREATE TABLE sgvas_returns (
    return_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    return_date DATE NOT NULL,
    order_item_id NUMBER NOT NULL,
    FOREIGN KEY (order_item_id) REFERENCES sgvas_order_items(order_item_id)
);

-- Step 2: Inserting Data

-- Insert data into sgvas_users
INSERT INTO sgvas_users (first_name, last_name, email, contact_number, registration_date) VALUES 
('User1', 'User11', 'user1@freeuni.edu.ge', '0000000', DATE '2023-03-15');
INSERT INTO sgvas_users (first_name, last_name, email, contact_number, registration_date) VALUES 
('User2', 'User22', 'user2@freeuni.edu.ge', '1111111', DATE '2023-03-20');
INSERT INTO sgvas_users (first_name, last_name, email, contact_number, registration_date) VALUES 
('User3', 'User33', 'user3@freeuni.edu.ge', '2222222', DATE '2023-02-10');
INSERT INTO sgvas_users (first_name, last_name, email, contact_number, registration_date) VALUES 
('User4', 'User44', 'user4@freeuni.edu.ge', '3333333', DATE '2020-02-10');

-- Insert data into sgvas_products
INSERT INTO sgvas_products (product_name, category, price, stock_quantity) VALUES
('Product1', 'Electronics', 1000.00, 10);
INSERT INTO sgvas_products (product_name, category, price, stock_quantity) VALUES
('Product2', 'Electronics', 200.00, 15);
INSERT INTO sgvas_products (product_name, category, price, stock_quantity) VALUES
('Product3', 'Stationery', 5.00, 50);
INSERT INTO sgvas_products (product_name, category, price, stock_quantity) VALUES
('Product4', 'Other', 7.99, 100);

-- Insert data into sgvas_orders
INSERT INTO sgvas_orders (user_id, order_date, total_amount, is_successful) VALUES
(1, DATE '2023-03-16', 1200.00, 'Y');
INSERT INTO sgvas_orders (user_id, order_date, total_amount, is_successful) VALUES
(2, DATE '2023-04-05', 200.00, 'Y');
INSERT INTO sgvas_orders (user_id, order_date, total_amount, is_successful) VALUES
(1, DATE '2023-03-01', 15.00, 'N');

-- Insert data into sgvas_order_items
INSERT INTO sgvas_order_items (order_id, product_id, quantity) VALUES
(1, 1, 1);
INSERT INTO sgvas_order_items (order_id, product_id, quantity) VALUES
(1, 2, 1);
INSERT INTO sgvas_order_items (order_id, product_id, quantity) VALUES
(2, 2, 3);
INSERT INTO sgvas_order_items (order_id, product_id, quantity) VALUES
(3, 4, 5);

-- Insert data into sgvas_returns
INSERT INTO sgvas_returns (order_item_id, return_date) VALUES
(2, DATE '2024-01-10');

-- Step 3: Queries

-- Query 1: Successful orders for users registered in March 2023
SELECT u.email, COUNT(o.order_id) AS successful_orders
FROM sgvas_users u
JOIN sgvas_orders o ON u.user_id = o.user_id
WHERE o.is_successful = 'Y' 
  AND u.registration_date BETWEEN DATE '2023-03-01' AND DATE '2023-03-31'
GROUP BY u.email;

-- Query 2: Products with stock greater than 8
SELECT product_name, stock_quantity
FROM sgvas_products
WHERE stock_quantity > 8;

-- Query 3: User with the highest total product orders in 2023
WITH order_totals AS (
    SELECT o.user_id, SUM(oi.quantity) AS total_products
    FROM sgvas_orders o
    JOIN sgvas_order_items oi ON o.order_id = oi.order_id
    WHERE EXTRACT(YEAR FROM o.order_date) = 2023
    GROUP BY o.user_id
),
max_total AS (
    SELECT MAX(total_products) AS max_products FROM order_totals
)
SELECT u.first_name, u.last_name, u.contact_number, t.total_products
FROM sgvas_users u
JOIN order_totals t ON u.user_id = t.user_id
JOIN max_total m ON t.total_products = m.max_products;

-- Query 4: Total revenue per product in 2023
SELECT p.product_name, SUM(oi.quantity * p.price) AS total_revenue
FROM sgvas_order_items oi
JOIN sgvas_products p ON oi.product_id = p.product_id
JOIN sgvas_orders o ON oi.order_id = o.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY p.product_name;

-- Query 5: Most returned product in 2024
WITH return_counts AS (
    SELECT oi.product_id, COUNT(r.return_id) AS return_count
    FROM sgvas_order_items oi
    JOIN sgvas_returns r ON oi.order_item_id = r.order_item_id
    WHERE EXTRACT(YEAR FROM r.return_date) = 2024
    GROUP BY oi.product_id
),
max_return AS (
    SELECT MAX(return_count) AS max_returns FROM return_counts
)
SELECT p.product_name
FROM sgvas_products p
JOIN return_counts rc ON p.product_id = rc.product_id
JOIN max_return mr ON rc.return_count = mr.max_returns;

-- Query 6: Price ratio of the most expensive to the cheapest product
SELECT MAX(price) / MIN(price) AS price_ratio
FROM sgvas_products;

-- Query 7: Available products grouped by category
SELECT category, COUNT(*) AS available_products
FROM sgvas_products
WHERE stock_quantity > 0
GROUP BY category;

-- Query 8: Product order trends by hour of the day
SELECT p.product_name, COUNT(*) AS total_orders, TO_CHAR(o.order_date, 'HH24') AS order_hour
FROM sgvas_order_items oi
JOIN sgvas_products p ON oi.product_id = p.product_id
JOIN sgvas_orders o ON oi.order_id = o.order_id
GROUP BY p.product_name, TO_CHAR(o.order_date, 'HH24')
ORDER BY p.product_name, order_hour;

-- Step 4: Dropping Objects

DROP TABLE sgvas_returns;
DROP TABLE sgvas_order_items;
DROP TABLE sgvas_orders;
DROP TABLE sgvas_products;
DROP TABLE sgvas_users;
